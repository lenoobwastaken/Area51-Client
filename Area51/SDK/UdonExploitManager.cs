using Il2CppSystem.Collections.Generic;
using UnityEngine;
using VRC;
using VRC.SDKBase;
using VRC.Udon;
using VRC.Udon.Common.Interfaces;

namespace Area51.SDK
{
	internal static class UdonExploitManager
	{
		internal static async void udonsend(string udonEvent, string targetnetwork)
		{
			switch (targetnetwork)
			{
			case "target":
			{
				for (int j = 0; j < WorldWrapper.udonBehaviours.Length; j++)
				{
					Dictionary<string, List<uint>>.KeyCollection.Enumerator enumerator2 = WorldWrapper.udonBehaviours[j]._eventTable.Keys.GetEnumerator();
					while (enumerator2.MoveNext())
					{
						string current2 = enumerator2.Current;
						if (current2 == udonEvent)
						{
							WorldWrapper.udonBehaviours[j].gameObject.SetEventOwner(PlayerWrapper.SelectedVRCPlayer());
							WorldWrapper.udonBehaviours[j].SendCustomNetworkEvent(NetworkEventTarget.Owner, current2);
						}
					}
				}
				break;
			}
			case "everyone":
			{
				for (int k = 0; k < PlayerWrapper.GetAllPlayers().Length; k++)
				{
					bool flag = PlayerWrapper.GetAllPlayers()[k].GetVRCPlayerApi() == PlayerWrapper.LocalPlayer.GetVRCPlayerApi();
					for (int l = 0; l < WorldWrapper.udonBehaviours.Length; l++)
					{
						Dictionary<string, List<uint>>.KeyCollection.Enumerator enumerator3 = WorldWrapper.udonBehaviours[l]._eventTable.Keys.GetEnumerator();
						while (enumerator3.MoveNext())
						{
							string current3 = enumerator3.Current;
							if (current3 == udonEvent && !flag)
							{
								Networking.SetOwner(PlayerWrapper.GetAllPlayers()[k].GetVRCPlayerApi(), WorldWrapper.udonBehaviours[l].gameObject);
								WorldWrapper.udonBehaviours[l].SendCustomNetworkEvent(NetworkEventTarget.Owner, current3);
							}
						}
					}
				}
				break;
			}
			case "local":
			{
				for (int i = 0; i < WorldWrapper.udonBehaviours.Length; i++)
				{
					Dictionary<string, List<uint>>.KeyCollection.Enumerator enumerator = WorldWrapper.udonBehaviours[i]._eventTable.Keys.GetEnumerator();
					while (enumerator.MoveNext())
					{
						string current = enumerator.Current;
						if (current == udonEvent)
						{
							WorldWrapper.udonBehaviours[i].gameObject.SetEventOwner(PlayerWrapper.LocalPlayer);
							WorldWrapper.udonBehaviours[i].SendCustomNetworkEvent(NetworkEventTarget.Owner, current);
						}
					}
				}
				break;
			}
			}
		}

		public static void trigersend(string objectname)
		{
			VRC_Trigger[] array = Resources.FindObjectsOfTypeAll<VRC_Trigger>();
			for (int i = 0; i < array.Length; i++)
			{
				if (array[i].name.ToLower().Contains(objectname))
				{
					array[i].Interact();
				}
			}
		}

		public static Player GrabOwner(this GameObject gameObject)
		{
			List<Player>.Enumerator enumerator = PlayerManager.field_Private_Static_PlayerManager_0.field_Private_List_1_Player_0.GetEnumerator();
			while (enumerator.MoveNext())
			{
				Player current = enumerator.Current;
				if (current.field_Private_VRCPlayerApi_0.IsOwner(gameObject))
				{
					return current;
				}
			}
			return null;
		}

		internal static void ObjectEvent(string objectName, string udonEvent, int target)
		{
			switch (target)
			{
			case 0:
			{
				GameObject[] array2 = Resources.FindObjectsOfTypeAll<GameObject>();
				for (int j = 0; j < array2.Length; j++)
				{
					if (array2[j].gameObject.name == objectName)
					{
						GameObject gameObject2 = array2[j].gameObject.TryCast<GameObject>();
						UdonBehaviour componentInChildren2 = array2[j].transform.gameObject.GetComponentInChildren<UdonBehaviour>(gameObject2);
						componentInChildren2.SendCustomNetworkEvent(NetworkEventTarget.All, udonEvent);
					}
				}
				break;
			}
			case 1:
			{
				GameObject[] array3 = Resources.FindObjectsOfTypeAll<GameObject>();
				for (int k = 0; k < array3.Length; k++)
				{
					if (array3[k].gameObject.name == objectName)
					{
						array3[k].gameObject.SetEventOwner(PlayerWrapper.SelectedVRCPlayer());
						GameObject gameObject3 = array3[k].gameObject.TryCast<GameObject>();
						UdonBehaviour componentInChildren3 = array3[k].transform.gameObject.GetComponentInChildren<UdonBehaviour>(gameObject3);
						componentInChildren3.SendCustomNetworkEvent(NetworkEventTarget.Owner, udonEvent);
					}
				}
				break;
			}
			case 2:
			{
				GameObject[] array = Resources.FindObjectsOfTypeAll<GameObject>();
				for (int i = 0; i < array.Length; i++)
				{
					if (array[i].gameObject.name == objectName)
					{
						array[i].gameObject.SetEventOwner(PlayerWrapper.GetPlayer());
						GameObject gameObject = array[i].gameObject.TryCast<GameObject>();
						UdonBehaviour componentInChildren = array[i].transform.gameObject.GetComponentInChildren<UdonBehaviour>(gameObject);
						componentInChildren.SendCustomNetworkEvent(NetworkEventTarget.Owner, udonEvent);
					}
				}
				break;
			}
			}
		}

		public static void SetEventOwner(this GameObject gameObject, Player player)
		{
			if (gameObject.GrabOwner() != player)
			{
				Networking.SetOwner(player.field_Private_VRCPlayerApi_0, gameObject);
			}
		}
	}
}
