using System;
using System.Collections;
using Area51.SDK;
using Area51.SDK.Photon;
using Area51.SDK.Security;
using ExitGames.Client.Photon;
using MelonLoader;
using Photon.Realtime;
using UnityEngine;
using VRC.SDKBase;

namespace Area51.Module.Exploit
{
	internal class USpeakEarRape : BaseModule
	{
		public USpeakEarRape()
			: base("Ear Rape", "Uspeak Ear Rape Exploit", Main.Instance.Eventexploitbutton, null, isToggle: true)
		{
		}

		public override void OnEnable()
		{
			try
			{
				MelonCoroutines.Start(RapeThyEars());
				LogHandler.LogDebug("Started Ear Raping Their Ears!");
			}
			catch (Exception ex)
			{
				if (ex.Message.Contains("Value cannot be null"))
				{
					LogHandler.Log(LogHandler.Colors.Red, "Unauthorized Request('Failed Authentication.'): Logout & Relaunch VRChat. ", timeStamp: true);
				}
				else
				{
					LogHandler.Log(LogHandler.Colors.Red, ex.Message, timeStamp: true);
				}
			}
		}

		public override void OnDisable()
		{
			LogHandler.LogDebug("Stopped Raping Their Ears!");
		}

		private IEnumerator RapeThyEars()
		{
			try
			{
				while (toggled)
				{
					byte[] array = Convert.FromBase64String(SecurityCheck.Earrape);
					byte[] src = new byte[4];
					byte[] bytes = BitConverter.GetBytes(Networking.GetServerTimeInMilliseconds());
					Buffer.BlockCopy(src, 0, array, 0, 4);
					Buffer.BlockCopy(bytes, 0, array, 4, 4);
					int num = 0;
					if (num < 60)
					{
						PhotonExtensions.OpRaiseEvent(1, array, new RaiseEventOptions
						{
							field_Public_ReceiverGroup_0 = ReceiverGroup.Others,
							field_Public_EventCaching_0 = EventCaching.DoNotCache
						}, default(SendOptions));
						if (!toggled)
						{
							OnDisable();
						}
						yield break;
					}
				}
			}
			catch (Exception)
			{
			}
			yield return new WaitForSecondsRealtime(0.7f);
		}
	}
}
